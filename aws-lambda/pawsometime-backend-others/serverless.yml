
service: pawsometime-backend-others

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
  region: us-west-2
  memorySize: 512
  environment:
    TIP_POSTS_TABLE: pawsometime-backend-posts-tip
    QNA_POSTS_TABLE: pawsometime-backend-posts-qna
    TRADE_POSTS_TABLE: pawsometime-backend-posts-trade
    GENERAL_POSTS_TABLE: pawsometime-backend-posts-general
    MEETUPS_TABLE: pawsometime-backend-meetups-meetups
    USERS_TABLE: pawsometime-backend-users-users
    HISTORY_TABLE: pawsometime-backend-others-history
    NEWS_TABLE: pawsometime-backend-others-news
    S3_BUCKET: pawsometime-serverless-s3
    GALLERY_TABLE: pawsometime-backend-others-gallery
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TIP_POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.QNA_POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRADE_POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GENERAL_POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.HISTORY_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NEWS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GALLERY_TABLE}"
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: 
        - "*"

functions:
  # comments endpoints
  commentResource:
    handler: comments/create.create
    events:
      - http:
          path: resource/{id}/comment
          method: post
          cors: true
          authorizer:
            name: cognito-token-authorization
            arn: arn:aws:cognito-idp:us-west-2:095515517792:userpool/us-west-2_blgzK1ffC

  deleteCommentResource:
    handler: comments/delete.delete
    events:
      - http:
          path: resource/{id}/comment/{commentId}
          method: post
          cors: true
          authorizer:
            name: cognito-token-authorization
            arn: arn:aws:cognito-idp:us-west-2:095515517792:userpool/us-west-2_blgzK1ffC

  # likes endpoints
  likeResource:
    handler: likes/like.like
    events:
      - http:
          path: resource/{id}/like
          method: post
          cors: true
          authorizer:
            name: cognito-token-authorization
            arn: arn:aws:cognito-idp:us-west-2:095515517792:userpool/us-west-2_blgzK1ffC
  
  # s3 endpoints
  s3UploadUrl:
    handler: s3/getSignedUrl.getSignedUploadUrl
    events:
      - http:
          path: s3/uploadurl
          method: post
          cors: true      
          authorizer:
            name: cognito-token-authorization
            arn: arn:aws:cognito-idp:us-west-2:095515517792:userpool/us-west-2_blgzK1ffC

  # s3GetUrl:
  #   handler: s3/getSignedUrl.getSignedUrl
  #   events:
  #     - http:
  #         path: s3/getSignedUrl
  #         method: post
  #         cors: true      
  #         # authorizer:
  #         #   name: cognito-token-authorization
  #         #   arn: arn:aws:cognito-idp:us-west-2:095515517792:userpool/us-west-2_blgzK1ffC

  # news endpoints
  getNews:
    handler: news/news.get
    events:
      - http:
          path: news
          method: get
          cors: true

  # history endpoints
  listHistory:
    handler: history/list.list
    events:
      - http:
          path: history
          method: get
          cors: true

  getHistory:
    handler: history/get.get
    events:
      - http:
          path: history/{id}
          method: get
          cors: true

  # cronNews:
  #   handler: news/cronNews.cronNews
  #   timeout: 10
  #   # events:
  #   #   - schedule: cron(0 11 * * ? *)

  cronNews:
    handler: news/cronNews.cronNews
    timeout: 10
    events:
      - http:
          path: news/cron
          method: get
          cors: true
  
  # test handler for fast-responst
  testGet:
    handler: handler.get
    events:
      - http:
          path: test/get
          method: get
          cors: true

resources:
  Resources:
    # news table
    NewsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NEWS_TABLE}
    # news table
    HistoryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.HISTORY_TABLE}
