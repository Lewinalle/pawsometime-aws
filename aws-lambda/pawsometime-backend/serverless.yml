# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pawsometime-backend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
  region: us-west-2
  memorySize: 768
  environment:
    POSTS_TABLE: ${self:service}-posts
    MEETUPS_TABLE: ${self:service}-meetups
    USERS_TABLE: ${self:service}-users
    NEWS_TABLE: ${self:service}-news
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.POSTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MEETUPS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NEWS_TABLE}"


# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # posts endpoints
  createPosts:
    handler: posts/create.create
    events:
      - http:
          path: posts
          method: post
          cors: true

  listPosts:
    handler: posts/list.list
    events:
      - http:
          path: posts
          method: get
          cors: true

  getPosts:
    handler: posts/get.get
    events:
      - http:
          path: posts/{id}
          method: get
          cors: true

  updatePosts:
    handler: posts/update.update
    events:
      - http:
          path: posts/{id}
          method: put
          cors: true
  
  deletePosts:
    handler: posts/delete.delete
    events:
      - http:
          path: posts/{id}
          method: delete
          cors: true

  # meetups endpoints
  createMeeups:
    handler: meetups/create.create
    events:
      - http:
          path: meetups
          method: post
          cors: true

  listMeeups:
    handler: meetups/list.list
    events:
      - http:
          path: meetups
          method: get
          cors: true

  getMeeups:
    handler: meetups/get.get
    events:
      - http:
          path: meetups/{id}
          method: get
          cors: true

  updateMeeups:
    handler: meetups/update.update
    events:
      - http:
          path: meetups/{id}
          method: put
          cors: true
  
  deleteMeeups:
    handler: meetups/delete.delete
    events:
      - http:
          path: meetups/{id}
          method: delete
          cors: true

  requestJoinMeeups:
    handler: meetups/join.request
    events:
      - http:
          path: meetups/{id}/request
          method: post
          cors: true

  acceptJoinMeeups:
    handler: meetups/join.accept
    events:
      - http:
          path: meetups/{id}/accept
          method: post
          cors: true
  
  rejectJoinMeeups:
    handler: meetups/join.reject
    events:
      - http:
          path: meetups/{id}/reject
          method: post
          cors: true
    
  # users endpoints
  createUsers:
    handler: users/create.create
    events:
      - http:
          path: users
          method: post
          cors: true

  listUsers:
    handler: users/list.list
    events:
      - http:
          path: users
          method: get
          cors: true

  getUsers:
    handler: users/get.get
    events:
      - http:
          path: users/{id}
          method: get
          cors: true

  updateUsers:
    handler: users/update.update
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
  
  deleteUsers:
    handler: users/delete.delete
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true

  friendsRequest:
    handler: users/friends.request
    events:
      - http:
          path: users/friends/request
          method: post
          cors: true
      
  friendsAccept:
    handler: users/friends.accept
    events:
      - http:
          path: users/friends/accept
          method: post
          cors: true

  friendsReject:
    handler: users/friends.reject
    events:
      - http:
          path: users/friends/reject
          method: post
          cors: true

  # comments endpoints
  commentResource:
    handler: comments/create.create
    events:
      - http:
          path: resource/{id}/comment
          method: post
          cors: true

  deleteCommentResource:
    handler: comments/delete.delete
    events:
      - http:
          path: resource/{id}/comment/{commentId}
          method: post
          cors: true

  # likes endpoints
  likeResource:
    handler: likes/like.like
    events:
      - http:
          path: resource/{id}/like
          method: post
          cors: true

  # news endpoints
  getNews:
    handler: news.get
    events:
      - http:
          path: news
          method: get
          cors: true
  
  # test handler for fast-responst
  testCall:
    handler: handler.hello
    events:
      - http:
          path: test
          method: get
          cors: true


resources:
  Resources:
    # posts table
    PostsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.POSTS_TABLE}
    # meetups table
    MeetupsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MEETUPS_TABLE}
    # users table
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_TABLE}
    # news table
    NewsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.NEWS_TABLE}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
